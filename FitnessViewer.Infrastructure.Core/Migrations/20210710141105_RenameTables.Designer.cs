// <auto-generated />
using System;
using FitnessViewer.Infrastructure.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FitnessViewer.Infrastructure.Core.Migrations
{
    [DbContext(typeof(ApplicationDb))]
    [Migration("20210710141105_RenameTables")]
    partial class RenameTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FitnessViewer.Infrastructure.Core.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("FitnessViewer.Infrastructure.Core.Models.Activity", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<int>("AchievementCount")
                        .HasColumnType("int");

                    b.Property<string>("ActivityTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AthleteCount")
                        .HasColumnType("int");

                    b.Property<long>("AthleteId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("AverageCadence")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AverageHeartrate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AveragePower")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AverageSpeed")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AverageTemperature")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Calories")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CommentCount")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DetailsDownloaded")
                        .HasColumnType("bit");

                    b.Property<string>("DeviceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Distance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DistanceInMiles")
                        .HasColumnType("decimal(18,2)");

                    b.Property<TimeSpan?>("ElapsedTime")
                        .HasColumnType("time");

                    b.Property<decimal>("ElevationGain")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("EmbedToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("EndLatitude")
                        .HasColumnType("float");

                    b.Property<double?>("EndLongitude")
                        .HasColumnType("float");

                    b.Property<string>("ExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GearId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasKudoed")
                        .HasColumnType("bit");

                    b.Property<bool>("HasPowerMeter")
                        .HasColumnType("bit");

                    b.Property<decimal?>("IntensityFactor")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsCommute")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFlagged")
                        .HasColumnType("bit");

                    b.Property<bool>("IsManual")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTrainer")
                        .HasColumnType("bit");

                    b.Property<decimal>("Kilojoules")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("KudosCount")
                        .HasColumnType("int");

                    b.Property<string>("MapId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MapPolyline")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MapPolylineSummary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MaxHeartrate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MaxSpeed")
                        .HasColumnType("decimal(18,2)");

                    b.Property<TimeSpan?>("MovingTime")
                        .HasColumnType("time");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhotoCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDateLocal")
                        .HasColumnType("datetime2");

                    b.Property<double?>("StartLatitude")
                        .HasColumnType("float");

                    b.Property<double?>("StartLongitude")
                        .HasColumnType("float");

                    b.Property<int?>("StreamSize")
                        .HasColumnType("int");

                    b.Property<int?>("StreamStep")
                        .HasColumnType("int");

                    b.Property<decimal?>("SufferScore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TSS")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TimeZone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalPhotoCount")
                        .HasColumnType("int");

                    b.Property<int?>("Truncated")
                        .HasColumnType("int");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("WeightedAverageWatts")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActivityTypeId");

                    b.HasIndex("AthleteId");

                    b.HasIndex("Start");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("FitnessViewer.Infrastructure.Core.Models.ActivityPeakDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ActivityId")
                        .HasColumnType("bigint");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int?>("EndIndex")
                        .HasColumnType("int");

                    b.Property<int?>("StartIndex")
                        .HasColumnType("int");

                    b.Property<int>("StreamType")
                        .HasColumnType("int");

                    b.Property<int?>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex(new[] { "Duration", "StreamType" }, "IX_ActivityPeakDetail_DurationAndStreamType");

                    b.HasIndex(new[] { "Value" }, "IX_ActivityPeakDetail_Value");

                    b.ToTable("ActivityPeakDetails");
                });

            modelBuilder.Entity("FitnessViewer.Infrastructure.Core.Models.ActivityPeaks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ActivityId")
                        .HasColumnType("bigint");

                    b.Property<int?>("Peak10")
                        .HasColumnType("int");

                    b.Property<int?>("Peak120")
                        .HasColumnType("int");

                    b.Property<int?>("Peak1200")
                        .HasColumnType("int");

                    b.Property<int?>("Peak1800")
                        .HasColumnType("int");

                    b.Property<int?>("Peak30")
                        .HasColumnType("int");

                    b.Property<int?>("Peak300")
                        .HasColumnType("int");

                    b.Property<int?>("Peak360")
                        .HasColumnType("int");

                    b.Property<int?>("Peak3600")
                        .HasColumnType("int");

                    b.Property<int?>("Peak5")
                        .HasColumnType("int");

                    b.Property<int?>("Peak60")
                        .HasColumnType("int");

                    b.Property<int?>("Peak600")
                        .HasColumnType("int");

                    b.Property<int?>("Peak720")
                        .HasColumnType("int");

                    b.Property<int?>("PeakDuration")
                        .HasColumnType("int");

                    b.Property<int>("StreamType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("ActivityPeaks");
                });

            modelBuilder.Entity("FitnessViewer.Infrastructure.Core.Models.ActivityType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsOther")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRide")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRun")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSwim")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("ActivityTypes");
                });

            modelBuilder.Entity("FitnessViewer.Infrastructure.Core.Models.Athlete", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<bool>("ApproveFollowers")
                        .HasColumnType("bit");

                    b.Property<long?>("AthleteSettingId")
                        .HasColumnType("bigint");

                    b.Property<int>("AthleteType")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedAt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DatePreference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExpiresAt")
                        .HasColumnType("int");

                    b.Property<int>("ExpiresIn")
                        .HasColumnType("int");

                    b.Property<int?>("FTP")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Follower")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Friend")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPremium")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MeasurementPreference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Profile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileMedium")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sex")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedAt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("AthleteSettingId");

                    b.HasIndex("UserId");

                    b.ToTable("Athletes");
                });

            modelBuilder.Entity("FitnessViewer.Infrastructure.Core.Models.AthleteSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AllDistanceUnit")
                        .HasColumnType("int");

                    b.Property<int>("AllElevationUnit")
                        .HasColumnType("int");

                    b.Property<int>("AllPaceUnit")
                        .HasColumnType("int");

                    b.Property<DateTime>("DashboardEnd")
                        .HasColumnType("datetime2");

                    b.Property<string>("DashboardRange")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<DateTime>("DashboardStart")
                        .HasColumnType("datetime2");

                    b.Property<int>("OtherDistanceUnit")
                        .HasColumnType("int");

                    b.Property<int>("OtherElevationUnit")
                        .HasColumnType("int");

                    b.Property<int>("OtherPaceUnit")
                        .HasColumnType("int");

                    b.Property<int>("RideDistanceUnit")
                        .HasColumnType("int");

                    b.Property<int>("RideElevationUnit")
                        .HasColumnType("int");

                    b.Property<int>("RidePaceUnit")
                        .HasColumnType("int");

                    b.Property<int>("RunDistanceUnit")
                        .HasColumnType("int");

                    b.Property<int>("RunElevationUnit")
                        .HasColumnType("int");

                    b.Property<int>("RunPaceUnit")
                        .HasColumnType("int");

                    b.Property<bool>("ShowAll")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowOther")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowRide")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowRun")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowSwim")
                        .HasColumnType("bit");

                    b.Property<int>("SwimDistanceUnit")
                        .HasColumnType("int");

                    b.Property<int>("SwimElevationUnit")
                        .HasColumnType("int");

                    b.Property<int>("SwimPaceUnit")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_AthleteSetting_UserId")
                        .IsUnique();

                    b.ToTable("AthleteSettings");
                });

            modelBuilder.Entity("FitnessViewer.Infrastructure.Core.Models.BestEffort", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ActivityId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Distance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<TimeSpan>("ElapsedTime")
                        .HasColumnType("time");

                    b.Property<int>("EndIndex")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("MovingTime")
                        .HasColumnType("time");

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("ResourceState")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDateLocal")
                        .HasColumnType("datetime2");

                    b.Property<int>("StartIndex")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex(new[] { "ElapsedTime" }, "IX_BestEffort_ElapsedTime");

                    b.HasIndex(new[] { "Name" }, "IX_BestEffort_Name");

                    b.ToTable("BestEfforts");
                });

            modelBuilder.Entity("FitnessViewer.Infrastructure.Core.Models.Calendar", b =>
                {
                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("DayName")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<string>("MonthName")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("WeekLabel")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.Property<string>("YearMonth")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("YearWeek")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.HasKey("Date");

                    b.ToTable("Calendars");
                });

            modelBuilder.Entity("FitnessViewer.Infrastructure.Core.Models.DownloadQueue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("ActivityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Added")
                        .HasColumnType("datetime2");

                    b.Property<int>("DownloadType")
                        .HasColumnType("int");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<bool?>("HasError")
                        .HasColumnType("bit");

                    b.Property<bool>("Processed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("DownloadQueues");
                });

            modelBuilder.Entity("FitnessViewer.Infrastructure.Core.Models.Gear", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("AthleteId")
                        .HasColumnType("bigint");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Distance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("FrameType")
                        .HasColumnType("int");

                    b.Property<int>("GearType")
                        .HasColumnType("int");

                    b.Property<bool?>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ResourceState")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AthleteId");

                    b.ToTable("Gears");
                });

            modelBuilder.Entity("FitnessViewer.Infrastructure.Core.Models.Lap", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ActivityId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("AverageCadence")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AverageHeartrate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AveragePower")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AverageSpeed")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Distance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<TimeSpan>("ElapsedTime")
                        .HasColumnType("time");

                    b.Property<int>("EndIndex")
                        .HasColumnType("int");

                    b.Property<int>("LapIndex")
                        .HasColumnType("int");

                    b.Property<decimal>("MaxHeartrate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MaxSpeed")
                        .HasColumnType("decimal(18,2)");

                    b.Property<TimeSpan>("MovingTime")
                        .HasColumnType("time");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResourceState")
                        .HasColumnType("int");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.Property<int>("StartIndex")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartLocal")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalElevationGain")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("Laps");
                });

            modelBuilder.Entity("FitnessViewer.Infrastructure.Core.Models.Metric", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsManual")
                        .HasColumnType("bit");

                    b.Property<int>("MetricType")
                        .HasColumnType("int");

                    b.Property<DateTime>("Recorded")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId", "Recorded", "MetricType" }, "IX_Metric_UserIdRecorded")
                        .IsUnique();

                    b.ToTable("Metrics");
                });

            modelBuilder.Entity("FitnessViewer.Infrastructure.Core.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("ActivityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("ItemsAdded")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("FitnessViewer.Infrastructure.Core.Models.PeakStreamTypeDuration", b =>
                {
                    b.Property<int>("PeakStreamType")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.HasKey("PeakStreamType", "Duration");

                    b.ToTable("PeakStreamTypeDurations");
                });

            modelBuilder.Entity("FitnessViewer.Infrastructure.Core.Models.Stream", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ActivityId")
                        .HasColumnType("bigint");

                    b.Property<double?>("Altitude")
                        .HasColumnType("float");

                    b.Property<int?>("Cadence")
                        .HasColumnType("int");

                    b.Property<double?>("Distance")
                        .HasColumnType("float");

                    b.Property<double?>("Gradient")
                        .HasColumnType("float");

                    b.Property<int?>("HeartRate")
                        .HasColumnType("int");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<bool?>("Moving")
                        .HasColumnType("bit");

                    b.Property<int?>("Temperature")
                        .HasColumnType("int");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.Property<double?>("Velocity")
                        .HasColumnType("float");

                    b.Property<int?>("Watts")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ActivityId" }, "IX_Stream_ActivityId")
                        .IsUnique();

                    b.HasIndex(new[] { "ActivityId", "Time" }, "IX_Stream_ActivityIdAndStream")
                        .IsUnique();

                    b.ToTable("Streams");
                });

            modelBuilder.Entity("FitnessViewer.Infrastructure.Core.Models.UserNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("NotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("UserNotifications");
                });

            modelBuilder.Entity("FitnessViewer.Infrastructure.Core.Models.Zone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.Property<int>("ZoneType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Zones");
                });

            modelBuilder.Entity("FitnessViewer.Infrastructure.Core.Models.ZoneRange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ZoneName")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<byte>("ZoneStart")
                        .HasColumnType("tinyint");

                    b.Property<int>("ZoneType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ZoneRanges");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("FitnessViewer.Infrastructure.Core.Models.Activity", b =>
                {
                    b.HasOne("FitnessViewer.Infrastructure.Core.Models.ActivityType", "ActivityType")
                        .WithMany()
                        .HasForeignKey("ActivityTypeId");

                    b.HasOne("FitnessViewer.Infrastructure.Core.Models.Athlete", "Athlete")
                        .WithMany("Activities")
                        .HasForeignKey("AthleteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitnessViewer.Infrastructure.Core.Models.Calendar", "Calendar")
                        .WithMany()
                        .HasForeignKey("Start")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActivityType");

                    b.Navigation("Athlete");

                    b.Navigation("Calendar");
                });

            modelBuilder.Entity("FitnessViewer.Infrastructure.Core.Models.ActivityPeakDetail", b =>
                {
                    b.HasOne("FitnessViewer.Infrastructure.Core.Models.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("FitnessViewer.Infrastructure.Core.Models.ActivityPeaks", b =>
                {
                    b.HasOne("FitnessViewer.Infrastructure.Core.Models.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("FitnessViewer.Infrastructure.Core.Models.Athlete", b =>
                {
                    b.HasOne("FitnessViewer.Infrastructure.Core.Models.AthleteSetting", "AthleteSetting")
                        .WithMany()
                        .HasForeignKey("AthleteSettingId");

                    b.HasOne("FitnessViewer.Infrastructure.Core.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AthleteSetting");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitnessViewer.Infrastructure.Core.Models.AthleteSetting", b =>
                {
                    b.HasOne("FitnessViewer.Infrastructure.Core.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitnessViewer.Infrastructure.Core.Models.BestEffort", b =>
                {
                    b.HasOne("FitnessViewer.Infrastructure.Core.Models.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("FitnessViewer.Infrastructure.Core.Models.DownloadQueue", b =>
                {
                    b.HasOne("FitnessViewer.Infrastructure.Core.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitnessViewer.Infrastructure.Core.Models.Gear", b =>
                {
                    b.HasOne("FitnessViewer.Infrastructure.Core.Models.Athlete", "Athlete")
                        .WithMany()
                        .HasForeignKey("AthleteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Athlete");
                });

            modelBuilder.Entity("FitnessViewer.Infrastructure.Core.Models.Lap", b =>
                {
                    b.HasOne("FitnessViewer.Infrastructure.Core.Models.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("FitnessViewer.Infrastructure.Core.Models.Metric", b =>
                {
                    b.HasOne("FitnessViewer.Infrastructure.Core.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitnessViewer.Infrastructure.Core.Models.Notification", b =>
                {
                    b.HasOne("FitnessViewer.Infrastructure.Core.Models.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId");

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("FitnessViewer.Infrastructure.Core.Models.Stream", b =>
                {
                    b.HasOne("FitnessViewer.Infrastructure.Core.Models.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("FitnessViewer.Infrastructure.Core.Models.UserNotification", b =>
                {
                    b.HasOne("FitnessViewer.Infrastructure.Core.Models.Notification", "Notification")
                        .WithMany()
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitnessViewer.Infrastructure.Core.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitnessViewer.Infrastructure.Core.Models.Zone", b =>
                {
                    b.HasOne("FitnessViewer.Infrastructure.Core.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitnessViewer.Infrastructure.Core.Models.ZoneRange", b =>
                {
                    b.HasOne("FitnessViewer.Infrastructure.Core.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FitnessViewer.Infrastructure.Core.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FitnessViewer.Infrastructure.Core.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitnessViewer.Infrastructure.Core.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FitnessViewer.Infrastructure.Core.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FitnessViewer.Infrastructure.Core.Models.Athlete", b =>
                {
                    b.Navigation("Activities");
                });
#pragma warning restore 612, 618
        }
    }
}
